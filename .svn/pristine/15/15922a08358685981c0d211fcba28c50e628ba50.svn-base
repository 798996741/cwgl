package com.fh.service.finance.sell.impl;

import com.fh.dao.finance.SellDao;
import com.fh.pojo.*;
import com.fh.service.finance.sell.SellService;
import com.fh.util.PageData;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;

@Service("sellServiceImpl")
public class SellServiceImpl implements SellService{
    @Resource(name = "sellDaoImpl")
    private SellDao sellDao;

    @Override
    public List<PageData> findSellContract(PageData pd) throws Exception {
        return (List<PageData>) sellDao.findForList("SellMapper.findSellContract",pd);
    }

    @Override
    public List<PageData> findPurContract(PageData pd) throws Exception {
        return (List<PageData>) sellDao.findForList("SellMapper.findPurContract",pd);
    }

    @Override
    public List<tbcontmon> findContmon(PageData pd) throws Exception {
        return (List<tbcontmon>) sellDao.findForList("SellMapper.findContmon", pd);
    }

    @Override
    public List<tbinvmon> findInvmon(PageData pd) throws Exception {
        return (List<tbinvmon>) sellDao.findForList("SellMapper.findInvmon", pd);
    }

    @Override
    public List<tbbusimon> findBusimon(PageData pd) throws Exception {
        return (List<tbbusimon>) sellDao.findForList("SellMapper.findBusimon", pd);
    }

    @Override
    public tbcontract findContractById(PageData contract) throws Exception {
        return (tbcontract)sellDao.findForObject("SellMapper.findContractById",contract);
    }

    @Override
    public List<PageData> getCno(PageData pd) throws Exception {
        return (List<PageData>) sellDao.findForList("SellMapper.getCno",pd);
    }

    @Override
    public List<PageData> getPno(PageData pd) throws Exception {
        return (List<PageData>) sellDao.findForList("SellMapper.getPno",pd);
    }

    @Override
    public List<PageData> getClino(PageData pd) throws Exception {
        return (List<PageData>) sellDao.findForList("SellMapper.getClino",pd);
    }

    @Override
    public List<PageData> getSupno(PageData pd) throws Exception {
        return (List<PageData>) sellDao.findForList("SellMapper.getSupno",pd);
    }

    @Override
    public void deleteContract(PageData pd) throws Exception {
        sellDao.delete("SellMapper.deleteContract", pd);
    }

    @Override
    public void deleteContmon(PageData pd) throws Exception {
        sellDao.delete("SellMapper.deleteContmon", pd);
    }

    @Override
    public void deleteInvmon(PageData pd) throws Exception {
        sellDao.delete("SellMapper.deleteInvmon", pd);
    }

    @Override
    public void deleteBusimon(PageData pd) throws Exception {
        sellDao.delete("SellMapper.deleteBusimon", pd);
    }

    @Override
    public void insertContract(PageData pd) throws Exception {
        sellDao.save("SellMapper.insertContract1", pd);
    }

    @Override
    public void insertContract(tbcontract contract) throws Exception {
        sellDao.save("SellMapper.insertContract", contract);
    }

    @Override
    public void insertContmon(tbcontmon contmon) throws Exception {
        sellDao.save("SellMapper.insertContmon",contmon);
    }

    @Override
    public void insertInvmon(tbinvmon invmon) throws Exception {
        sellDao.save("SellMapper.insertInvmon",invmon);
    }

    @Override
    public void insertBusimon(tbbusimon busimon) throws Exception {
        sellDao.save("SellMapper.insertBusimon",busimon);
    }

    @Override
    public void insertContmon(PageData pd) throws Exception {
        sellDao.save("SellMapper.insertContmon1",pd);
    }

    @Override
    public void insertInvmon(PageData pd) throws Exception {
        sellDao.save("SellMapper.insertInvmon1",pd);
    }

    @Override
    public void insertBusimon(PageData pd) throws Exception {
        sellDao.save("SellMapper.insertBusimon1",pd);
    }

    @Override
    public void updateContractById(tbcontract contract) throws Exception {
        sellDao.update("SellMapper.updateContractById",contract);
    }

    @Override
    public void updateContmonById(tbcontmon contmon) throws Exception {
        sellDao.update("SellMapper.updateContmonById",contmon);
    }

    @Override
    public void updateInvmonById(tbinvmon invmon) throws Exception {
        sellDao.update("SellMapper.insertInvmon",invmon);
    }

    @Override
    public void updateBusimonById(tbbusimon busimon) throws Exception {
        sellDao.update("SellMapper.updateBusimonById",busimon);
    }

    @Override
    public tbcontmon lastContmon(PageData pd) throws Exception {
        return (tbcontmon)sellDao.findForObject("SellMapper.lastContmon", pd);
    }

    @Override
    public tbinvmon lastInvmon(PageData pageData) throws Exception {
        return (tbinvmon)sellDao.findForObject("SellMapper.lastInvmon", pageData);
    }

    @Override
    public tbbusimon lastBusimon(PageData pd) throws Exception {
        return (tbbusimon)sellDao.findForObject("SellMapper.lastBusimon", pd);
    }

    @Override
    public PageData conWord(PageData pd) throws Exception {
        return (PageData) sellDao.findForObject("SellMapper.conWord",pd);
    }

    @Override
    public PageData clinoWord(PageData pd) throws Exception {
        return (PageData) sellDao.findForObject("SellMapper.clinoWord",pd);
    }

    @Override
    public PageData supnoWord(PageData pd) throws Exception {
        return (PageData) sellDao.findForObject("SellMapper.supnoWord",pd);
    }

    @Override
    public PageData maxConid(PageData pd) throws Exception {
        return (PageData)sellDao.findForObject("SellMapper.maxConid",pd);
    }

}
